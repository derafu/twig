{% extends 'base.html.twig' %}

{% block body %}
<div class="container mt-4">
    <h1 class="mb-4 border-bottom">
        {% block title %}Predefined Themes{% endblock %}
    </h1>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th rowspan="2">Theme</th>
                <th colspan="4">Primary</th>
                <th colspan="4">Secondary</th>
                <th colspan="4">Tertiary</th>
            </tr>
            <tr>
                <th>Normal</th><th>Light</th><th>Dark</th><th>Contrast</th>
                <th>Normal</th><th>Light</th><th>Dark</th><th>Contrast</th>
                <th>Normal</th><th>Light</th><th>Dark</th><th>Contrast</th>
            </tr>
        </thead>
        <tbody>
            {% for theme, name in themes %}
                <tr class="derafu-theme-{{ theme }}">
                    <td>{{ name }}</td>
                    {% for type in ['primary', 'secondary', 'tertiary'] %}
                        {% for variant in ['', '-light', '-dark', '-contrast'] %}
                            <td><div class="color-box" style="background: var(--color-{{ type }}{{ variant }});" data-bs-toggle="tooltip" title=""></div></td>
                        {% endfor %}
                    {% endfor %}
                </tr>
            {% endfor %}
        </tbody>
    </table>
</div>
{% endblock %}

{% block stylesheets %}
<style>
    table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 5px;
    }
    th, td {
        text-align: center;
        padding: 10px;
        border-radius: 5px;
    }
    .color-box {
        width: 36px;
        height: 36px;
        border-radius: 5px;
        display: inline-block;
        border: 1px solid black;
    }
</style>
{% endblock %}

{% block javascripts %}
<script>
document.addEventListener("DOMContentLoaded", function () {
    let colorBoxes = document.querySelectorAll(".color-box");
    colorBoxes.forEach(box => {
        let rgbColor = getComputedStyle(box).backgroundColor;
        let hexColor = rgbToHex(rgbColor);
        box.setAttribute("title", hexColor);
        box.addEventListener("click", function () {
            navigator.clipboard.writeText(hexColor).then(() => {
                //alert("Copied: " + hexColor);
            });
        });
    });

    function rgbToHex(rgb) {
        let result = rgb.match(/\d+/g).map(num => parseInt(num).toString(16).padStart(2, "0"));
        return `#${result.join("")}`;
    }

    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
});
</script>
{% endblock %}
